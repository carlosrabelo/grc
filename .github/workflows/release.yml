name: Manual Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (example: v1.0.0)'
        required: true

jobs:
  release:
    name: Build And Release
    runs-on: ubuntu-latest
    env:
      GO_VERSION: '1.21'
      TAG: ${{ inputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Prepare environment
        run: |
          set -euo pipefail
          mkdir -p dist
          echo "BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

      - name: Build binaries
        run: |
          set -euo pipefail
          targets=("linux/amd64" "linux/arm64" "darwin/amd64" "darwin/arm64" "windows/amd64")
          for target in "${targets[@]}"; do
            GOOS="${target%%/*}"
            GOARCH="${target##*/}"
            base_name="grc_${GOOS}_${GOARCH}"
            binary_path="dist/${base_name}"
            if [ "$GOOS" = "windows" ]; then
              binary_path="${binary_path}.exe"
            fi
            echo "Building ${GOOS}/${GOARCH}"
            CGO_ENABLED=0 GOOS="$GOOS" GOARCH="$GOARCH" \
              go build -trimpath -tags netgo -ldflags="-s -w -X main.version=${TAG} -X main.buildTime=${BUILD_TIME}" \
              -o "$binary_path" ./cmd/grc
            if [ "$GOOS" = "windows" ]; then
              (cd dist && zip -q "${base_name}.zip" "${base_name}.exe")
              rm -f "$binary_path"
            else
              (cd dist && tar -czf "${base_name}.tar.gz" "${base_name}")
              rm -f "$binary_path"
            fi
          done
        env:
          TAG: ${{ env.TAG }}
          BUILD_TIME: ${{ env.BUILD_TIME }}

      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          name: grc ${{ env.TAG }}
          generate_release_notes: true
          files: |
            dist/*.tar.gz
            dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
